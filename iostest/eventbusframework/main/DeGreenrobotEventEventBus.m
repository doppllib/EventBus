//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsLooper.h"
#include "DeGreenrobotEventAsyncPoster.h"
#include "DeGreenrobotEventBackgroundPoster.h"
#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventEventBusBuilder.h"
#include "DeGreenrobotEventEventBusException.h"
#include "DeGreenrobotEventHandlerPoster.h"
#include "DeGreenrobotEventNoSubscriberEvent.h"
#include "DeGreenrobotEventPendingPost.h"
#include "DeGreenrobotEventSubscriberExceptionEvent.h"
#include "DeGreenrobotEventSubscriberMethod.h"
#include "DeGreenrobotEventSubscriberMethodFinder.h"
#include "DeGreenrobotEventSubscription.h"
#include "DeGreenrobotEventThreadMode.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/ExecutorService.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface DeGreenrobotEventEventBus () {
 @public
  id<JavaUtilMap> subscriptionsByEventType_;
  id<JavaUtilMap> typesBySubscriber_;
  id<JavaUtilMap> stickyEvents_;
  JavaLangThreadLocal *currentPostingThreadState_;
  DeGreenrobotEventHandlerPoster *mainThreadPoster_;
  DeGreenrobotEventBackgroundPoster *backgroundPoster_;
  DeGreenrobotEventAsyncPoster *asyncPoster_;
  DeGreenrobotEventSubscriberMethodFinder *subscriberMethodFinder_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  jboolean throwSubscriberException_;
  jboolean logSubscriberExceptions_;
  jboolean logNoSubscriberMessages_;
  jboolean sendSubscriberExceptionEvent_;
  jboolean sendNoSubscriberEvent_;
  jboolean eventInheritance_;
}

- (void)register__WithId:(id)subscriber
             withBoolean:(jboolean)sticky
                 withInt:(jint)priority;

- (void)subscribeWithId:(id)subscriber
withDeGreenrobotEventSubscriberMethod:(DeGreenrobotEventSubscriberMethod *)subscriberMethod
            withBoolean:(jboolean)sticky
                withInt:(jint)priority;

- (void)unubscribeByEventTypeWithId:(id)subscriber
                       withIOSClass:(IOSClass *)eventType;

- (void)postSingleEventWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState;

- (jboolean)postSingleEventForEventTypeWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState
                                 withIOSClass:(IOSClass *)eventClass;

- (void)postToSubscriptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                     withId:(id)event
                                                withBoolean:(jboolean)isMainThread;

- (id<JavaUtilList>)lookupAllEventTypesWithIOSClass:(IOSClass *)eventClass;

- (void)handleSubscriberExceptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                            withId:(id)event
                                                   withNSException:(NSException *)cause;

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, subscriptionsByEventType_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, typesBySubscriber_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, stickyEvents_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, currentPostingThreadState_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, mainThreadPoster_, DeGreenrobotEventHandlerPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, backgroundPoster_, DeGreenrobotEventBackgroundPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, asyncPoster_, DeGreenrobotEventAsyncPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, subscriberMethodFinder_, DeGreenrobotEventSubscriberMethodFinder *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, executorService_, id<JavaUtilConcurrentExecutorService>)

inline DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_get_DEFAULT_BUILDER();
static DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_DEFAULT_BUILDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventEventBus, DEFAULT_BUILDER, DeGreenrobotEventEventBusBuilder *)

inline id<JavaUtilMap> DeGreenrobotEventEventBus_get_eventTypesCache();
static id<JavaUtilMap> DeGreenrobotEventEventBus_eventTypesCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventEventBus, eventTypesCache, id<JavaUtilMap>)

__attribute__((unused)) static void DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, jboolean sticky, jint priority);

__attribute__((unused)) static void DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, DeGreenrobotEventSubscriberMethod *subscriberMethod, jboolean sticky, jint priority);

__attribute__((unused)) static void DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(DeGreenrobotEventEventBus *self, id subscriber, IOSClass *eventType);

__attribute__((unused)) static void DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState);

__attribute__((unused)) static jboolean DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState, IOSClass *eventClass);

__attribute__((unused)) static void DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, jboolean isMainThread);

__attribute__((unused)) static id<JavaUtilList> DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(DeGreenrobotEventEventBus *self, IOSClass *eventClass);

__attribute__((unused)) static void DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, NSException *cause);

@interface DeGreenrobotEventEventBus_1 : JavaLangThreadLocal

- (instancetype)init;

- (DeGreenrobotEventEventBus_PostingThreadState *)initialValue OBJC_METHOD_FAMILY_NONE;

- (DeGreenrobotEventEventBus_PostingThreadState *)get;

- (DeGreenrobotEventEventBus_PostingThreadState *)childValueWithId:(DeGreenrobotEventEventBus_PostingThreadState *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(DeGreenrobotEventEventBus_1)

__attribute__((unused)) static void DeGreenrobotEventEventBus_1_init(DeGreenrobotEventEventBus_1 *self);

__attribute__((unused)) static DeGreenrobotEventEventBus_1 *new_DeGreenrobotEventEventBus_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DeGreenrobotEventEventBus_1 *create_DeGreenrobotEventEventBus_1_init();

@interface DeGreenrobotEventEventBus_PostCallback : NSObject

@end

J2OBJC_INITIALIZED_DEFN(DeGreenrobotEventEventBus)

NSString *DeGreenrobotEventEventBus_TAG = @"Event";
volatile_id DeGreenrobotEventEventBus_defaultInstance;

@implementation DeGreenrobotEventEventBus

+ (DeGreenrobotEventEventBus *)getDefault {
  return DeGreenrobotEventEventBus_getDefault();
}

+ (DeGreenrobotEventEventBusBuilder *)builder {
  return DeGreenrobotEventEventBus_builder();
}

+ (void)clearCaches {
  DeGreenrobotEventEventBus_clearCaches();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithDeGreenrobotEventEventBusBuilder:(DeGreenrobotEventEventBusBuilder *)builder {
  DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(self, builder);
  return self;
}

- (void)register__WithId:(id)subscriber {
  DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(self, subscriber, false, 0);
}

- (void)register__WithId:(id)subscriber
                 withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(self, subscriber, false, priority);
}

- (void)registerStickyWithId:(id)subscriber {
  DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(self, subscriber, true, 0);
}

- (void)registerStickyWithId:(id)subscriber
                     withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(self, subscriber, true, priority);
}

- (void)register__WithId:(id)subscriber
             withBoolean:(jboolean)sticky
                 withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(self, subscriber, sticky, priority);
}

- (void)subscribeWithId:(id)subscriber
withDeGreenrobotEventSubscriberMethod:(DeGreenrobotEventSubscriberMethod *)subscriberMethod
            withBoolean:(jboolean)sticky
                withInt:(jint)priority {
  DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, priority);
}

- (jboolean)isRegisteredWithId:(id)subscriber {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(typesBySubscriber_)) containsKeyWithId:subscriber];
  }
}

- (void)unubscribeByEventTypeWithId:(id)subscriber
                       withIOSClass:(IOSClass *)eventType {
  DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(self, subscriber, eventType);
}

- (void)unregisterWithId:(id)subscriber {
  @synchronized(self) {
    id<JavaUtilList> subscribedTypes = [((id<JavaUtilMap>) nil_chk(typesBySubscriber_)) getWithId:subscriber];
    if (subscribedTypes != nil) {
      for (IOSClass * __strong eventType in subscribedTypes) {
        DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(self, subscriber, eventType);
      }
      [typesBySubscriber_ removeWithId:subscriber];
    }
    else {
      AndroidUtilLog_wWithNSString_withNSString_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@", @"Subscriber to unregister was not registered before: ", [nil_chk(subscriber) java_getClass]));
    }
  }
}

- (void)postWithId:(id)event {
  DeGreenrobotEventEventBus_PostingThreadState *postingState = [((JavaLangThreadLocal *) nil_chk(currentPostingThreadState_)) get];
  id<JavaUtilList> eventQueue = ((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->eventQueue_;
  [((id<JavaUtilList>) nil_chk(eventQueue)) addWithId:event];
  if (!postingState->isPosting_) {
    postingState->isMainThread_ = (AndroidOsLooper_getMainLooper() == AndroidOsLooper_myLooper());
    postingState->isPosting_ = true;
    if (postingState->canceled_) {
      @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"Internal error. Abort state was not reset");
    }
    @try {
      while (![eventQueue isEmpty]) {
        DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(self, [eventQueue removeWithInt:0], postingState);
      }
    }
    @finally {
      postingState->isPosting_ = false;
      postingState->isMainThread_ = false;
    }
  }
}

- (void)cancelEventDeliveryWithId:(id)event {
  DeGreenrobotEventEventBus_PostingThreadState *postingState = [((JavaLangThreadLocal *) nil_chk(currentPostingThreadState_)) get];
  if (!((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->isPosting_) {
    @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"This method may only be called from inside event handling methods on the posting thread");
  }
  else if (event == nil) {
    @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"Event may not be null");
  }
  else if (postingState->event_ != event) {
    @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"Only the currently handled event may be aborted");
  }
  else if (((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(postingState->subscription_))->subscriberMethod_))->threadMode_ != JreLoadEnum(DeGreenrobotEventThreadMode, PostThread)) {
    @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@" event handlers may only abort the incoming event");
  }
  postingState->canceled_ = true;
}

- (void)postStickyWithId:(id)event {
  @synchronized(stickyEvents_) {
    [((id<JavaUtilMap>) nil_chk(stickyEvents_)) putWithId:[nil_chk(event) java_getClass] withId:event];
  }
  [self postWithId:event];
}

- (id)getStickyEventWithIOSClass:(IOSClass *)eventType {
  @synchronized(stickyEvents_) {
    return [((IOSClass *) nil_chk(eventType)) cast:[((id<JavaUtilMap>) nil_chk(stickyEvents_)) getWithId:eventType]];
  }
}

- (id)removeStickyEventWithIOSClass:(IOSClass *)eventType {
  @synchronized(stickyEvents_) {
    return [((IOSClass *) nil_chk(eventType)) cast:[((id<JavaUtilMap>) nil_chk(stickyEvents_)) removeWithId:eventType]];
  }
}

- (jboolean)removeStickyEventWithId:(id)event {
  @synchronized(stickyEvents_) {
    IOSClass *eventType = [nil_chk(event) java_getClass];
    id existingEvent = [((id<JavaUtilMap>) nil_chk(stickyEvents_)) getWithId:eventType];
    if ([event isEqual:existingEvent]) {
      [stickyEvents_ removeWithId:eventType];
      return true;
    }
    else {
      return false;
    }
  }
}

- (void)removeAllStickyEvents {
  @synchronized(stickyEvents_) {
    [((id<JavaUtilMap>) nil_chk(stickyEvents_)) clear];
  }
}

- (jboolean)hasSubscriberForEventWithIOSClass:(IOSClass *)eventClass {
  id<JavaUtilList> eventTypes = DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
  if (eventTypes != nil) {
    jint countTypes = [eventTypes size];
    for (jint h = 0; h < countTypes; h++) {
      IOSClass *clazz = [eventTypes getWithInt:h];
      JavaUtilConcurrentCopyOnWriteArrayList *subscriptions;
      @synchronized(self) {
        subscriptions = [((id<JavaUtilMap>) nil_chk(subscriptionsByEventType_)) getWithId:clazz];
      }
      if (subscriptions != nil && ![subscriptions isEmpty]) {
        return true;
      }
    }
  }
  return false;
}

- (void)postSingleEventWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState {
  DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(self, event, postingState);
}

- (jboolean)postSingleEventForEventTypeWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState
                                 withIOSClass:(IOSClass *)eventClass {
  return DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, eventClass);
}

- (void)postToSubscriptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                     withId:(id)event
                                                withBoolean:(jboolean)isMainThread {
  DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, subscription, event, isMainThread);
}

- (id<JavaUtilList>)lookupAllEventTypesWithIOSClass:(IOSClass *)eventClass {
  return DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
}

+ (void)addInterfacesWithJavaUtilList:(id<JavaUtilList>)eventTypes
                    withIOSClassArray:(IOSObjectArray *)interfaces {
  DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, interfaces);
}

- (void)invokeSubscriberWithDeGreenrobotEventPendingPost:(DeGreenrobotEventPendingPost *)pendingPost {
  id event = ((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_;
  DeGreenrobotEventSubscription *subscription = pendingPost->subscription_;
  DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(pendingPost);
  if (JreLoadVolatileBoolean(&((DeGreenrobotEventSubscription *) nil_chk(subscription))->active_)) {
    [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
  }
}

- (void)invokeSubscriberWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                   withId:(id)event {
  @try {
    [((JavaLangReflectMethod *) nil_chk(((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriberMethod_))->method_)) invokeWithId:subscription->subscriber_ withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ event } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(self, subscription, event, [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Unexpected exception", e);
  }
}

- (void)handleSubscriberExceptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                            withId:(id)event
                                                   withNSException:(NSException *)cause {
  DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(self, subscription, event, cause);
}

- (id<JavaUtilConcurrentExecutorService>)getExecutorService {
  return executorService_;
}

- (void)dealloc {
  RELEASE_(subscriptionsByEventType_);
  RELEASE_(typesBySubscriber_);
  RELEASE_(stickyEvents_);
  RELEASE_(currentPostingThreadState_);
  RELEASE_(mainThreadPoster_);
  RELEASE_(backgroundPoster_);
  RELEASE_(asyncPoster_);
  RELEASE_(subscriberMethodFinder_);
  RELEASE_(executorService_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LDeGreenrobotEventEventBus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDeGreenrobotEventEventBusBuilder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x21, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 17, -1, 21, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 24, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 30, 17, -1, 31, -1, -1 },
    { NULL, "V", 0x8, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x0, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 35, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDefault);
  methods[1].selector = @selector(builder);
  methods[2].selector = @selector(clearCaches);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(initWithDeGreenrobotEventEventBusBuilder:);
  methods[5].selector = @selector(register__WithId:);
  methods[6].selector = @selector(register__WithId:withInt:);
  methods[7].selector = @selector(registerStickyWithId:);
  methods[8].selector = @selector(registerStickyWithId:withInt:);
  methods[9].selector = @selector(register__WithId:withBoolean:withInt:);
  methods[10].selector = @selector(subscribeWithId:withDeGreenrobotEventSubscriberMethod:withBoolean:withInt:);
  methods[11].selector = @selector(isRegisteredWithId:);
  methods[12].selector = @selector(unubscribeByEventTypeWithId:withIOSClass:);
  methods[13].selector = @selector(unregisterWithId:);
  methods[14].selector = @selector(postWithId:);
  methods[15].selector = @selector(cancelEventDeliveryWithId:);
  methods[16].selector = @selector(postStickyWithId:);
  methods[17].selector = @selector(getStickyEventWithIOSClass:);
  methods[18].selector = @selector(removeStickyEventWithIOSClass:);
  methods[19].selector = @selector(removeStickyEventWithId:);
  methods[20].selector = @selector(removeAllStickyEvents);
  methods[21].selector = @selector(hasSubscriberForEventWithIOSClass:);
  methods[22].selector = @selector(postSingleEventWithId:withDeGreenrobotEventEventBus_PostingThreadState:);
  methods[23].selector = @selector(postSingleEventForEventTypeWithId:withDeGreenrobotEventEventBus_PostingThreadState:withIOSClass:);
  methods[24].selector = @selector(postToSubscriptionWithDeGreenrobotEventSubscription:withId:withBoolean:);
  methods[25].selector = @selector(lookupAllEventTypesWithIOSClass:);
  methods[26].selector = @selector(addInterfacesWithJavaUtilList:withIOSClassArray:);
  methods[27].selector = @selector(invokeSubscriberWithDeGreenrobotEventPendingPost:);
  methods[28].selector = @selector(invokeSubscriberWithDeGreenrobotEventSubscription:withId:);
  methods[29].selector = @selector(handleSubscriberExceptionWithDeGreenrobotEventSubscription:withId:withNSException:);
  methods[30].selector = @selector(getExecutorService);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 40, -1, -1 },
    { "defaultInstance", "LDeGreenrobotEventEventBus;", .constantValue.asLong = 0, 0x48, -1, 41, -1, -1 },
    { "DEFAULT_BUILDER", "LDeGreenrobotEventEventBusBuilder;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "eventTypesCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 43, 44, -1 },
    { "subscriptionsByEventType_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 45, -1 },
    { "typesBySubscriber_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 46, -1 },
    { "stickyEvents_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 47, -1 },
    { "currentPostingThreadState_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "mainThreadPoster_", "LDeGreenrobotEventHandlerPoster;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "backgroundPoster_", "LDeGreenrobotEventBackgroundPoster;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "asyncPoster_", "LDeGreenrobotEventAsyncPoster;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subscriberMethodFinder_", "LDeGreenrobotEventSubscriberMethodFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "executorService_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "throwSubscriberException_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "logSubscriberExceptions_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "logNoSubscriberMessages_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sendSubscriberExceptionEvent_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sendNoSubscriberEvent_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventInheritance_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDeGreenrobotEventEventBusBuilder;", "register", "LNSObject;", "LNSObject;I", "registerSticky", "LNSObject;ZI", "subscribe", "LNSObject;LDeGreenrobotEventSubscriberMethod;ZI", "isRegistered", "unubscribeByEventType", "LNSObject;LIOSClass;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)V", "unregister", "post", "cancelEventDelivery", "postSticky", "getStickyEvent", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;", "removeStickyEvent", "hasSubscriberForEvent", "(Ljava/lang/Class<*>;)Z", "postSingleEvent", "LNSObject;LDeGreenrobotEventEventBus_PostingThreadState;", "LJavaLangError;", "postSingleEventForEventType", "LNSObject;LDeGreenrobotEventEventBus_PostingThreadState;LIOSClass;", "(Ljava/lang/Object;Lde/greenrobot/event/EventBus$PostingThreadState;Ljava/lang/Class<*>;)Z", "postToSubscription", "LDeGreenrobotEventSubscription;LNSObject;Z", "lookupAllEventTypes", "(Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/Class<*>;>;", "addInterfaces", "LJavaUtilList;[LIOSClass;", "(Ljava/util/List<Ljava/lang/Class<*>;>;[Ljava/lang/Class<*>;)V", "invokeSubscriber", "LDeGreenrobotEventPendingPost;", "LDeGreenrobotEventSubscription;LNSObject;", "handleSubscriberException", "LDeGreenrobotEventSubscription;LNSObject;LNSException;", &DeGreenrobotEventEventBus_TAG, &DeGreenrobotEventEventBus_defaultInstance, &DeGreenrobotEventEventBus_DEFAULT_BUILDER, &DeGreenrobotEventEventBus_eventTypesCache, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/List<Ljava/lang/Class<*>;>;>;", "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/concurrent/CopyOnWriteArrayList<Lde/greenrobot/event/Subscription;>;>;", "Ljava/util/Map<Ljava/lang/Object;Ljava/util/List<Ljava/lang/Class<*>;>;>;", "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/lang/Object;>;", "Ljava/lang/ThreadLocal<Lde/greenrobot/event/EventBus$PostingThreadState;>;", "LDeGreenrobotEventEventBus_PostingThreadState;LDeGreenrobotEventEventBus_PostCallback;" };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus = { "EventBus", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x1, 31, 19, -1, 49, -1, -1, -1 };
  return &_DeGreenrobotEventEventBus;
}

+ (void)initialize {
  if (self == [DeGreenrobotEventEventBus class]) {
    JreStrongAssignAndConsume(&DeGreenrobotEventEventBus_DEFAULT_BUILDER, new_DeGreenrobotEventEventBusBuilder_init());
    JreStrongAssignAndConsume(&DeGreenrobotEventEventBus_eventTypesCache, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(DeGreenrobotEventEventBus)
  }
}

@end

DeGreenrobotEventEventBus *DeGreenrobotEventEventBus_getDefault() {
  DeGreenrobotEventEventBus_initialize();
  if (JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance) == nil) {
    @synchronized(DeGreenrobotEventEventBus_class_()) {
      if (JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance) == nil) {
        JreVolatileStrongAssign(&DeGreenrobotEventEventBus_defaultInstance, create_DeGreenrobotEventEventBus_init());
      }
    }
  }
  return JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance);
}

DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_builder() {
  DeGreenrobotEventEventBus_initialize();
  return create_DeGreenrobotEventEventBusBuilder_init();
}

void DeGreenrobotEventEventBus_clearCaches() {
  DeGreenrobotEventEventBus_initialize();
  DeGreenrobotEventSubscriberMethodFinder_clearCaches();
  [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventEventBus_eventTypesCache)) clear];
}

void DeGreenrobotEventEventBus_init(DeGreenrobotEventEventBus *self) {
  DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(self, DeGreenrobotEventEventBus_DEFAULT_BUILDER);
}

DeGreenrobotEventEventBus *new_DeGreenrobotEventEventBus_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventEventBus, init)
}

DeGreenrobotEventEventBus *create_DeGreenrobotEventEventBus_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventEventBus, init)
}

void DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBus *self, DeGreenrobotEventEventBusBuilder *builder) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->currentPostingThreadState_, new_DeGreenrobotEventEventBus_1_init());
  JreStrongAssignAndConsume(&self->subscriptionsByEventType_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->typesBySubscriber_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->stickyEvents_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->mainThreadPoster_, new_DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(self, AndroidOsLooper_getMainLooper(), 10));
  JreStrongAssignAndConsume(&self->backgroundPoster_, new_DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(self));
  JreStrongAssignAndConsume(&self->asyncPoster_, new_DeGreenrobotEventAsyncPoster_initWithDeGreenrobotEventEventBus_(self));
  JreStrongAssignAndConsume(&self->subscriberMethodFinder_, new_DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(((DeGreenrobotEventEventBusBuilder *) nil_chk(builder))->skipMethodVerificationForClasses_));
  self->logSubscriberExceptions_ = builder->logSubscriberExceptions_;
  self->logNoSubscriberMessages_ = builder->logNoSubscriberMessages_;
  self->sendSubscriberExceptionEvent_ = builder->sendSubscriberExceptionEvent_;
  self->sendNoSubscriberEvent_ = builder->sendNoSubscriberEvent_;
  self->throwSubscriberException_ = builder->throwSubscriberException_;
  self->eventInheritance_ = builder->eventInheritance_;
  JreStrongAssign(&self->executorService_, builder->executorService_);
}

DeGreenrobotEventEventBus *new_DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBusBuilder *builder) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventEventBus, initWithDeGreenrobotEventEventBusBuilder_, builder)
}

DeGreenrobotEventEventBus *create_DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBusBuilder *builder) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventEventBus, initWithDeGreenrobotEventEventBusBuilder_, builder)
}

void DeGreenrobotEventEventBus_register__WithId_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, jboolean sticky, jint priority) {
  @synchronized(self) {
    id<JavaUtilList> subscriberMethods = [((DeGreenrobotEventSubscriberMethodFinder *) nil_chk(self->subscriberMethodFinder_)) findSubscriberMethodsWithIOSClass:[nil_chk(subscriber) java_getClass]];
    for (DeGreenrobotEventSubscriberMethod * __strong subscriberMethod in nil_chk(subscriberMethods)) {
      DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, priority);
    }
  }
}

void DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, DeGreenrobotEventSubscriberMethod *subscriberMethod, jboolean sticky, jint priority) {
  IOSClass *eventType = ((DeGreenrobotEventSubscriberMethod *) nil_chk(subscriberMethod))->eventType_;
  JavaUtilConcurrentCopyOnWriteArrayList *subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventType];
  DeGreenrobotEventSubscription *newSubscription = create_DeGreenrobotEventSubscription_initWithId_withDeGreenrobotEventSubscriberMethod_withInt_(subscriber, subscriberMethod, priority);
  if (subscriptions == nil) {
    subscriptions = create_JavaUtilConcurrentCopyOnWriteArrayList_init();
    [self->subscriptionsByEventType_ putWithId:eventType withId:subscriptions];
  }
  else {
    if ([subscriptions containsWithId:newSubscription]) {
      @throw create_DeGreenrobotEventEventBusException_initWithNSString_(JreStrcat("$@$@", @"Subscriber ", [nil_chk(subscriber) java_getClass], @" already registered to event ", eventType));
    }
  }
  jint size = [subscriptions size];
  for (jint i = 0; i <= size; i++) {
    if (i == size || newSubscription->priority_ > ((DeGreenrobotEventSubscription *) nil_chk([subscriptions getWithInt:i]))->priority_) {
      [subscriptions addWithInt:i withId:newSubscription];
      break;
    }
  }
  id<JavaUtilList> subscribedEvents = [((id<JavaUtilMap>) nil_chk(self->typesBySubscriber_)) getWithId:subscriber];
  if (subscribedEvents == nil) {
    subscribedEvents = create_JavaUtilArrayList_init();
    [self->typesBySubscriber_ putWithId:subscriber withId:subscribedEvents];
  }
  [subscribedEvents addWithId:eventType];
  if (sticky) {
    id stickyEvent;
    @synchronized(self->stickyEvents_) {
      stickyEvent = [((id<JavaUtilMap>) nil_chk(self->stickyEvents_)) getWithId:eventType];
    }
    if (stickyEvent != nil) {
      DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, newSubscription, stickyEvent, AndroidOsLooper_getMainLooper() == AndroidOsLooper_myLooper());
    }
  }
}

void DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(DeGreenrobotEventEventBus *self, id subscriber, IOSClass *eventType) {
  id<JavaUtilList> subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventType];
  if (subscriptions != nil) {
    jint size = [subscriptions size];
    for (jint i = 0; i < size; i++) {
      DeGreenrobotEventSubscription *subscription = [subscriptions getWithInt:i];
      if (((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_ == subscriber) {
        JreAssignVolatileBoolean(&subscription->active_, false);
        [subscriptions removeWithInt:i];
        i--;
        size--;
      }
    }
  }
}

void DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState) {
  IOSClass *eventClass = [nil_chk(event) java_getClass];
  jboolean subscriptionFound = false;
  if (self->eventInheritance_) {
    id<JavaUtilList> eventTypes = DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
    jint countTypes = [((id<JavaUtilList>) nil_chk(eventTypes)) size];
    for (jint h = 0; h < countTypes; h++) {
      IOSClass *clazz = [eventTypes getWithInt:h];
      subscriptionFound |= DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, clazz);
    }
  }
  else {
    subscriptionFound = DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, eventClass);
  }
  if (!subscriptionFound) {
    if (self->logNoSubscriberMessages_) {
      AndroidUtilLog_dWithNSString_withNSString_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@", @"No subscribers registered for event ", eventClass));
    }
    if (self->sendNoSubscriberEvent_ && eventClass != DeGreenrobotEventNoSubscriberEvent_class_() && eventClass != DeGreenrobotEventSubscriberExceptionEvent_class_()) {
      [self postWithId:create_DeGreenrobotEventNoSubscriberEvent_initWithDeGreenrobotEventEventBus_withId_(self, event)];
    }
  }
}

jboolean DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState, IOSClass *eventClass) {
  JavaUtilConcurrentCopyOnWriteArrayList *subscriptions;
  @synchronized(self) {
    subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventClass];
  }
  if (subscriptions != nil && ![subscriptions isEmpty]) {
    for (DeGreenrobotEventSubscription * __strong subscription in subscriptions) {
      JreStrongAssign(&((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->event_, event);
      JreStrongAssign(&postingState->subscription_, subscription);
      jboolean aborted = false;
      @try {
        DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, subscription, event, postingState->isMainThread_);
        aborted = postingState->canceled_;
      }
      @finally {
        JreStrongAssign(&postingState->event_, nil);
        JreStrongAssign(&postingState->subscription_, nil);
        postingState->canceled_ = false;
      }
      if (aborted) {
        break;
      }
    }
    return true;
  }
  return false;
}

void DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, jboolean isMainThread) {
  switch ([((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriberMethod_))->threadMode_ ordinal]) {
    case DeGreenrobotEventThreadMode_Enum_PostThread:
    [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    break;
    case DeGreenrobotEventThreadMode_Enum_MainThread:
    if (isMainThread) {
      [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    else {
      [((DeGreenrobotEventHandlerPoster *) nil_chk(self->mainThreadPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    break;
    case DeGreenrobotEventThreadMode_Enum_BackgroundThread:
    if (isMainThread) {
      [((DeGreenrobotEventBackgroundPoster *) nil_chk(self->backgroundPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    else {
      [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    break;
    case DeGreenrobotEventThreadMode_Enum_Async:
    [((DeGreenrobotEventAsyncPoster *) nil_chk(self->asyncPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    break;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Unknown thread mode: ", subscription->subscriberMethod_->threadMode_));
  }
}

id<JavaUtilList> DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(DeGreenrobotEventEventBus *self, IOSClass *eventClass) {
  @synchronized(DeGreenrobotEventEventBus_eventTypesCache) {
    id<JavaUtilList> eventTypes = [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventEventBus_eventTypesCache)) getWithId:eventClass];
    if (eventTypes == nil) {
      eventTypes = create_JavaUtilArrayList_init();
      IOSClass *clazz = eventClass;
      while (clazz != nil) {
        [eventTypes addWithId:clazz];
        DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, [clazz getInterfaces]);
        clazz = [clazz getSuperclass];
      }
      [DeGreenrobotEventEventBus_eventTypesCache putWithId:eventClass withId:eventTypes];
    }
    return eventTypes;
  }
}

void DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(id<JavaUtilList> eventTypes, IOSObjectArray *interfaces) {
  DeGreenrobotEventEventBus_initialize();
  {
    IOSObjectArray *a__ = interfaces;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *interfaceClass = *b__++;
      if (![((id<JavaUtilList>) nil_chk(eventTypes)) containsWithId:interfaceClass]) {
        [eventTypes addWithId:interfaceClass];
        DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, [((IOSClass *) nil_chk(interfaceClass)) getInterfaces]);
      }
    }
  }
}

void DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, NSException *cause) {
  if ([event isKindOfClass:[DeGreenrobotEventSubscriberExceptionEvent class]]) {
    if (self->logSubscriberExceptions_) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$", @"SubscriberExceptionEvent subscriber ", [nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_) java_getClass], @" threw an exception"), cause);
      DeGreenrobotEventSubscriberExceptionEvent *exEvent = (DeGreenrobotEventSubscriberExceptionEvent *) cast_chk(event, [DeGreenrobotEventSubscriberExceptionEvent class]);
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$@", @"Initial event ", ((DeGreenrobotEventSubscriberExceptionEvent *) nil_chk(exEvent))->causingEvent_, @" caused exception in ", exEvent->causingSubscriber_), exEvent->throwable_);
    }
  }
  else {
    if (self->throwSubscriberException_) {
      @throw create_DeGreenrobotEventEventBusException_initWithNSString_withNSException_(@"Invoking subscriber failed", cause);
    }
    if (self->logSubscriberExceptions_) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$@", @"Could not dispatch event: ", [nil_chk(event) java_getClass], @" to subscribing class ", [nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_) java_getClass]), cause);
    }
    if (self->sendSubscriberExceptionEvent_) {
      DeGreenrobotEventSubscriberExceptionEvent *exEvent = create_DeGreenrobotEventSubscriberExceptionEvent_initWithDeGreenrobotEventEventBus_withNSException_withId_withId_(self, cause, event, ((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_);
      [self postWithId:exEvent];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus)

@implementation DeGreenrobotEventEventBus_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (DeGreenrobotEventEventBus_PostingThreadState *)initialValue {
  return create_DeGreenrobotEventEventBus_PostingThreadState_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDeGreenrobotEventEventBus_PostingThreadState;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LDeGreenrobotEventEventBus;", "Ljava/lang/ThreadLocal<Lde/greenrobot/event/EventBus$PostingThreadState;>;" };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_1 = { "", "de.greenrobot.event", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_DeGreenrobotEventEventBus_1;
}

@end

void DeGreenrobotEventEventBus_1_init(DeGreenrobotEventEventBus_1 *self) {
  JavaLangThreadLocal_init(self);
}

DeGreenrobotEventEventBus_1 *new_DeGreenrobotEventEventBus_1_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventEventBus_1, init)
}

DeGreenrobotEventEventBus_1 *create_DeGreenrobotEventEventBus_1_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventEventBus_1, init)
}

@implementation DeGreenrobotEventEventBus_PostingThreadState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_PostingThreadState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(eventQueue_);
  RELEASE_(subscription_);
  RELEASE_(event_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventQueue_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 0, -1 },
    { "isPosting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isMainThread_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subscription_", "LDeGreenrobotEventSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "event_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "canceled_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/List<Ljava/lang/Object;>;", "LDeGreenrobotEventEventBus;" };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_PostingThreadState = { "PostingThreadState", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x18, 1, 6, 1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventEventBus_PostingThreadState;
}

@end

void DeGreenrobotEventEventBus_PostingThreadState_init(DeGreenrobotEventEventBus_PostingThreadState *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->eventQueue_, new_JavaUtilArrayList_init());
}

DeGreenrobotEventEventBus_PostingThreadState *new_DeGreenrobotEventEventBus_PostingThreadState_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventEventBus_PostingThreadState, init)
}

DeGreenrobotEventEventBus_PostingThreadState *create_DeGreenrobotEventEventBus_PostingThreadState_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventEventBus_PostingThreadState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus_PostingThreadState)

@implementation DeGreenrobotEventEventBus_PostCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onPostCompletedWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onPostCompleted", "LJavaUtilList;", "(Ljava/util/List<Lde/greenrobot/event/SubscriberExceptionEvent;>;)V", "LDeGreenrobotEventEventBus;" };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_PostCallback = { "PostCallback", "de.greenrobot.event", ptrTable, methods, NULL, 7, 0x608, 1, 0, 3, -1, -1, -1, -1 };
  return &_DeGreenrobotEventEventBus_PostCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus_PostCallback)
