//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DeGreenrobotEventSubscriberMethod.h"
#include "DeGreenrobotEventThreadMode.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Method.h"

@interface DeGreenrobotEventSubscriberMethod ()

- (void)checkMethodString;

@end

__attribute__((unused)) static void DeGreenrobotEventSubscriberMethod_checkMethodString(DeGreenrobotEventSubscriberMethod *self);

@implementation DeGreenrobotEventSubscriberMethod

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
              withDeGreenrobotEventThreadMode:(DeGreenrobotEventThreadMode *)threadMode
                                 withIOSClass:(IOSClass *)eventType {
  DeGreenrobotEventSubscriberMethod_initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_(self, method, threadMode, eventType);
  return self;
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[DeGreenrobotEventSubscriberMethod class]]) {
    DeGreenrobotEventSubscriberMethod_checkMethodString(self);
    DeGreenrobotEventSubscriberMethod *otherSubscriberMethod = (DeGreenrobotEventSubscriberMethod *) cast_chk(other, [DeGreenrobotEventSubscriberMethod class]);
    DeGreenrobotEventSubscriberMethod_checkMethodString(nil_chk(otherSubscriberMethod));
    return [((NSString *) nil_chk(methodString_)) isEqual:otherSubscriberMethod->methodString_];
  }
  else {
    return false;
  }
}

- (void)checkMethodString {
  DeGreenrobotEventSubscriberMethod_checkMethodString(self);
}

- (NSUInteger)hash {
  return ((jint) [((JavaLangReflectMethod *) nil_chk(method_)) hash]);
}

- (void)dealloc {
  RELEASE_(method_);
  RELEASE_(threadMode_);
  RELEASE_(eventType_);
  RELEASE_(methodString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:withDeGreenrobotEventThreadMode:withIOSClass:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(checkMethodString);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "method_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "threadMode_", "LDeGreenrobotEventThreadMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "eventType_", "LIOSClass;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "methodString_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectMethod;LDeGreenrobotEventThreadMode;LIOSClass;", "(Ljava/lang/reflect/Method;Lde/greenrobot/event/ThreadMode;Ljava/lang/Class<*>;)V", "equals", "LNSObject;", "hashCode", "Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _DeGreenrobotEventSubscriberMethod = { "SubscriberMethod", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x10, 4, 4, -1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventSubscriberMethod;
}

@end

void DeGreenrobotEventSubscriberMethod_initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_(DeGreenrobotEventSubscriberMethod *self, JavaLangReflectMethod *method, DeGreenrobotEventThreadMode *threadMode, IOSClass *eventType) {
  NSObject_init(self);
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->threadMode_, threadMode);
  JreStrongAssign(&self->eventType_, eventType);
}

DeGreenrobotEventSubscriberMethod *new_DeGreenrobotEventSubscriberMethod_initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_(JavaLangReflectMethod *method, DeGreenrobotEventThreadMode *threadMode, IOSClass *eventType) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventSubscriberMethod, initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_, method, threadMode, eventType)
}

DeGreenrobotEventSubscriberMethod *create_DeGreenrobotEventSubscriberMethod_initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_(JavaLangReflectMethod *method, DeGreenrobotEventThreadMode *threadMode, IOSClass *eventType) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventSubscriberMethod, initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_, method, threadMode, eventType)
}

void DeGreenrobotEventSubscriberMethod_checkMethodString(DeGreenrobotEventSubscriberMethod *self) {
  @synchronized(self) {
    if (self->methodString_ == nil) {
      JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
      [builder appendWithNSString:[((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(self->method_)) getDeclaringClass])) getName]];
      [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'#'])) appendWithNSString:[self->method_ getName]];
      [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:[((IOSClass *) nil_chk(self->eventType_)) getName]];
      JreStrongAssign(&self->methodString_, [builder description]);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventSubscriberMethod)
