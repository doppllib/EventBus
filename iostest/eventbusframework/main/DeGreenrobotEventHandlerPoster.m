//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "AndroidOsMessage.h"
#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventEventBusException.h"
#include "DeGreenrobotEventHandlerPoster.h"
#include "DeGreenrobotEventPendingPost.h"
#include "DeGreenrobotEventPendingPostQueue.h"
#include "DeGreenrobotEventSubscription.h"
#include "J2ObjC_source.h"
#include "android/os/SystemClock.h"

@interface DeGreenrobotEventHandlerPoster () {
 @public
  DeGreenrobotEventPendingPostQueue *queue_;
  jint maxMillisInsideHandleMessage_;
  __unsafe_unretained DeGreenrobotEventEventBus *eventBus_;
  jboolean handlerActive_;
}

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventHandlerPoster, queue_, DeGreenrobotEventPendingPostQueue *)

@implementation DeGreenrobotEventHandlerPoster

- (instancetype)initWithDeGreenrobotEventEventBus:(DeGreenrobotEventEventBus *)eventBus
                              withAndroidOsLooper:(AndroidOsLooper *)looper
                                          withInt:(jint)maxMillisInsideHandleMessage {
  DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(self, eventBus, looper, maxMillisInsideHandleMessage);
  return self;
}

- (void)enqueueWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                          withId:(id)event {
  DeGreenrobotEventPendingPost *pendingPost = DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(subscription, event);
  @synchronized(self) {
    [((DeGreenrobotEventPendingPostQueue *) nil_chk(queue_)) enqueueWithDeGreenrobotEventPendingPost:pendingPost];
    if (!handlerActive_) {
      handlerActive_ = true;
      if (![self sendMessageWithAndroidOsMessage:[self obtainMessage]]) {
        @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"Could not send handler message");
      }
    }
  }
}

- (void)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
  jboolean rescheduled = false;
  @try {
    jlong started = AndroidOsSystemClock_uptimeMillis();
    while (true) {
      DeGreenrobotEventPendingPost *pendingPost = [((DeGreenrobotEventPendingPostQueue *) nil_chk(queue_)) poll];
      if (pendingPost == nil) {
        @synchronized(self) {
          pendingPost = [queue_ poll];
          if (pendingPost == nil) {
            handlerActive_ = false;
            return;
          }
        }
      }
      [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) invokeSubscriberWithDeGreenrobotEventPendingPost:pendingPost];
      jlong timeInMethod = AndroidOsSystemClock_uptimeMillis() - started;
      if (timeInMethod >= maxMillisInsideHandleMessage_) {
        if (![self sendMessageWithAndroidOsMessage:[self obtainMessage]]) {
          @throw create_DeGreenrobotEventEventBusException_initWithNSString_(@"Could not send handler message");
        }
        rescheduled = true;
        return;
      }
    }
  }
  @finally {
    handlerActive_ = rescheduled;
  }
}

- (void)__javaClone:(DeGreenrobotEventHandlerPoster *)original {
  [super __javaClone:original];
  [eventBus_ release];
}

- (void)dealloc {
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDeGreenrobotEventEventBus:withAndroidOsLooper:withInt:);
  methods[1].selector = @selector(enqueueWithDeGreenrobotEventSubscription:withId:);
  methods[2].selector = @selector(handleMessageWithAndroidOsMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LDeGreenrobotEventPendingPostQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxMillisInsideHandleMessage_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventBus_", "LDeGreenrobotEventEventBus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handlerActive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDeGreenrobotEventEventBus;LAndroidOsLooper;I", "enqueue", "LDeGreenrobotEventSubscription;LNSObject;", "handleMessage", "LAndroidOsMessage;" };
  static const J2ObjcClassInfo _DeGreenrobotEventHandlerPoster = { "HandlerPoster", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x10, 3, 4, -1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventHandlerPoster;
}

@end

void DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(DeGreenrobotEventHandlerPoster *self, DeGreenrobotEventEventBus *eventBus, AndroidOsLooper *looper, jint maxMillisInsideHandleMessage) {
  AndroidOsHandler_initWithAndroidOsLooper_(self, looper);
  self->eventBus_ = eventBus;
  self->maxMillisInsideHandleMessage_ = maxMillisInsideHandleMessage;
  JreStrongAssignAndConsume(&self->queue_, new_DeGreenrobotEventPendingPostQueue_init());
}

DeGreenrobotEventHandlerPoster *new_DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(DeGreenrobotEventEventBus *eventBus, AndroidOsLooper *looper, jint maxMillisInsideHandleMessage) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventHandlerPoster, initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_, eventBus, looper, maxMillisInsideHandleMessage)
}

DeGreenrobotEventHandlerPoster *create_DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(DeGreenrobotEventEventBus *eventBus, AndroidOsLooper *looper, jint maxMillisInsideHandleMessage) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventHandlerPoster, initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_, eventBus, looper, maxMillisInsideHandleMessage)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventHandlerPoster)
