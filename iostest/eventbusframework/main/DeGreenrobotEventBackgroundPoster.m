//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DeGreenrobotEventBackgroundPoster.h"
#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventPendingPost.h"
#include "DeGreenrobotEventPendingPostQueue.h"
#include "DeGreenrobotEventSubscription.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ExecutorService.h"

@interface DeGreenrobotEventBackgroundPoster () {
 @public
  DeGreenrobotEventPendingPostQueue *queue_;
  __unsafe_unretained DeGreenrobotEventEventBus *eventBus_;
  volatile_jboolean executorRunning_;
}

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventBackgroundPoster, queue_, DeGreenrobotEventPendingPostQueue *)

@implementation DeGreenrobotEventBackgroundPoster

- (instancetype)initWithDeGreenrobotEventEventBus:(DeGreenrobotEventEventBus *)eventBus {
  DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(self, eventBus);
  return self;
}

- (void)enqueueWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                          withId:(id)event {
  DeGreenrobotEventPendingPost *pendingPost = DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(subscription, event);
  @synchronized(self) {
    [((DeGreenrobotEventPendingPostQueue *) nil_chk(queue_)) enqueueWithDeGreenrobotEventPendingPost:pendingPost];
    if (!JreLoadVolatileBoolean(&executorRunning_)) {
      JreAssignVolatileBoolean(&executorRunning_, true);
      [((id<JavaUtilConcurrentExecutorService>) nil_chk([((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) getExecutorService])) executeWithJavaLangRunnable:self];
    }
  }
}

- (void)run {
  @try {
    @try {
      while (true) {
        DeGreenrobotEventPendingPost *pendingPost = [((DeGreenrobotEventPendingPostQueue *) nil_chk(queue_)) pollWithInt:1000];
        if (pendingPost == nil) {
          @synchronized(self) {
            pendingPost = [queue_ poll];
            if (pendingPost == nil) {
              JreAssignVolatileBoolean(&executorRunning_, false);
              return;
            }
          }
        }
        [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) invokeSubscriberWithDeGreenrobotEventPendingPost:pendingPost];
      }
    }
    @catch (JavaLangInterruptedException *e) {
      AndroidUtilLog_wWithNSString_withNSString_withNSException_(@"Event", JreStrcat("$$", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @" was interruppted"), e);
    }
  }
  @finally {
    JreAssignVolatileBoolean(&executorRunning_, false);
  }
}

- (void)__javaClone:(DeGreenrobotEventBackgroundPoster *)original {
  [super __javaClone:original];
  [eventBus_ release];
}

- (void)dealloc {
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDeGreenrobotEventEventBus:);
  methods[1].selector = @selector(enqueueWithDeGreenrobotEventSubscription:withId:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LDeGreenrobotEventPendingPostQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventBus_", "LDeGreenrobotEventEventBus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "executorRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDeGreenrobotEventEventBus;", "enqueue", "LDeGreenrobotEventSubscription;LNSObject;" };
  static const J2ObjcClassInfo _DeGreenrobotEventBackgroundPoster = { "BackgroundPoster", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x10, 3, 3, -1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventBackgroundPoster;
}

@end

void DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(DeGreenrobotEventBackgroundPoster *self, DeGreenrobotEventEventBus *eventBus) {
  NSObject_init(self);
  self->eventBus_ = eventBus;
  JreStrongAssignAndConsume(&self->queue_, new_DeGreenrobotEventPendingPostQueue_init());
}

DeGreenrobotEventBackgroundPoster *new_DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(DeGreenrobotEventEventBus *eventBus) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventBackgroundPoster, initWithDeGreenrobotEventEventBus_, eventBus)
}

DeGreenrobotEventBackgroundPoster *create_DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(DeGreenrobotEventEventBus *eventBus) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventBackgroundPoster, initWithDeGreenrobotEventEventBus_, eventBus)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventBackgroundPoster)
