//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DeGreenrobotEventPendingPost.h"
#include "DeGreenrobotEventSubscription.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface DeGreenrobotEventPendingPost ()

- (instancetype)initWithId:(id)event
withDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription;

@end

inline id<JavaUtilList> DeGreenrobotEventPendingPost_get_pendingPostPool();
static id<JavaUtilList> DeGreenrobotEventPendingPost_pendingPostPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventPendingPost, pendingPostPool, id<JavaUtilList>)

__attribute__((unused)) static void DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(DeGreenrobotEventPendingPost *self, id event, DeGreenrobotEventSubscription *subscription);

__attribute__((unused)) static DeGreenrobotEventPendingPost *new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) NS_RETURNS_RETAINED;

__attribute__((unused)) static DeGreenrobotEventPendingPost *create_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription);

J2OBJC_INITIALIZED_DEFN(DeGreenrobotEventPendingPost)

@implementation DeGreenrobotEventPendingPost

- (instancetype)initWithId:(id)event
withDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription {
  DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(self, event, subscription);
  return self;
}

+ (DeGreenrobotEventPendingPost *)obtainPendingPostWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                                              withId:(id)event {
  return DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(subscription, event);
}

+ (void)releasePendingPostWithDeGreenrobotEventPendingPost:(DeGreenrobotEventPendingPost *)pendingPost {
  DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(pendingPost);
}

- (void)dealloc {
  RELEASE_(event_);
  RELEASE_(subscription_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LDeGreenrobotEventPendingPost;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withDeGreenrobotEventSubscription:);
  methods[1].selector = @selector(obtainPendingPostWithDeGreenrobotEventSubscription:withId:);
  methods[2].selector = @selector(releasePendingPostWithDeGreenrobotEventPendingPost:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pendingPostPool", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 5, 6, -1 },
    { "event_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subscription_", "LDeGreenrobotEventSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LDeGreenrobotEventPendingPost;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LDeGreenrobotEventSubscription;", "obtainPendingPost", "LDeGreenrobotEventSubscription;LNSObject;", "releasePendingPost", "LDeGreenrobotEventPendingPost;", &DeGreenrobotEventPendingPost_pendingPostPool, "Ljava/util/List<Lde/greenrobot/event/PendingPost;>;" };
  static const J2ObjcClassInfo _DeGreenrobotEventPendingPost = { "PendingPost", "de.greenrobot.event", ptrTable, methods, fields, 7, 0x10, 3, 4, -1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventPendingPost;
}

+ (void)initialize {
  if (self == [DeGreenrobotEventPendingPost class]) {
    JreStrongAssignAndConsume(&DeGreenrobotEventPendingPost_pendingPostPool, new_JavaUtilArrayList_init());
    J2OBJC_SET_INITIALIZED(DeGreenrobotEventPendingPost)
  }
}

@end

void DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(DeGreenrobotEventPendingPost *self, id event, DeGreenrobotEventSubscription *subscription) {
  NSObject_init(self);
  JreStrongAssign(&self->event_, event);
  JreStrongAssign(&self->subscription_, subscription);
}

DeGreenrobotEventPendingPost *new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventPendingPost, initWithId_withDeGreenrobotEventSubscription_, event, subscription)
}

DeGreenrobotEventPendingPost *create_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventPendingPost, initWithId_withDeGreenrobotEventSubscription_, event, subscription)
}

DeGreenrobotEventPendingPost *DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(DeGreenrobotEventSubscription *subscription, id event) {
  DeGreenrobotEventPendingPost_initialize();
  @synchronized(DeGreenrobotEventPendingPost_pendingPostPool) {
    jint size = [((id<JavaUtilList>) nil_chk(DeGreenrobotEventPendingPost_pendingPostPool)) size];
    if (size > 0) {
      DeGreenrobotEventPendingPost *pendingPost = [DeGreenrobotEventPendingPost_pendingPostPool removeWithInt:size - 1];
      JreStrongAssign(&((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_, event);
      JreStrongAssign(&pendingPost->subscription_, subscription);
      JreStrongAssign(&pendingPost->next_, nil);
      return pendingPost;
    }
  }
  return create_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(event, subscription);
}

void DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(DeGreenrobotEventPendingPost *pendingPost) {
  DeGreenrobotEventPendingPost_initialize();
  JreStrongAssign(&((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_, nil);
  JreStrongAssign(&pendingPost->subscription_, nil);
  JreStrongAssign(&pendingPost->next_, nil);
  @synchronized(DeGreenrobotEventPendingPost_pendingPostPool) {
    if ([((id<JavaUtilList>) nil_chk(DeGreenrobotEventPendingPost_pendingPostPool)) size] < 10000) {
      [DeGreenrobotEventPendingPost_pendingPostPool addWithId:pendingPost];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventPendingPost)
