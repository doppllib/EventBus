//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsLooper.h"
#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventTestAbstractEventBusTest.h"
#include "DeGreenrobotEventTestEventBusMultithreadedTest.h"
#include "DeGreenrobotEventTestIntTestEvent.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "junit/framework/TestCase.h"
#include "org/junit/Test.h"

@interface DeGreenrobotEventTestEventBusMultithreadedTest () {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *countStringEvent_;
  JavaUtilConcurrentAtomicAtomicInteger *countIntegerEvent_;
  JavaUtilConcurrentAtomicAtomicInteger *countObjectEvent_;
  JavaUtilConcurrentAtomicAtomicInteger *countIntTestEvent_;
  NSString *lastStringEvent_;
  JavaLangInteger *lastIntegerEvent_;
  DeGreenrobotEventTestIntTestEvent *lastIntTestEvent_;
}

- (void)runThreadsSingleEventTypeWithInt:(jint)threadCount;

- (void)runThreadsMixedEventTypeWithInt:(jint)threadCount;

- (void)runThreadsMixedEventTypeWithInt:(jint)count
                                withInt:(jint)threadCount;

- (jlong)triggerAndWaitForThreadsWithJavaUtilList:(id<JavaUtilList>)threads
             withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch;

- (id<JavaUtilList>)startThreadsWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                             withInt:(jint)threadCount
                                                             withInt:(jint)iterations
                                                              withId:(id)eventToPost;

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, countStringEvent_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, countIntegerEvent_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, countObjectEvent_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, countIntTestEvent_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, lastStringEvent_, NSString *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, lastIntegerEvent_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest, lastIntTestEvent_, DeGreenrobotEventTestIntTestEvent *)

inline jint DeGreenrobotEventTestEventBusMultithreadedTest_get_COUNT();
#define DeGreenrobotEventTestEventBusMultithreadedTest_COUNT 1000
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventTestEventBusMultithreadedTest, COUNT, jint)

__attribute__((unused)) static void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint threadCount);

__attribute__((unused)) static void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint threadCount);

__attribute__((unused)) static void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_withInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint count, jint threadCount);

__attribute__((unused)) static jlong DeGreenrobotEventTestEventBusMultithreadedTest_triggerAndWaitForThreadsWithJavaUtilList_withJavaUtilConcurrentCountDownLatch_(DeGreenrobotEventTestEventBusMultithreadedTest *self, id<JavaUtilList> threads, JavaUtilConcurrentCountDownLatch *latch);

__attribute__((unused)) static id<JavaUtilList> DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(DeGreenrobotEventTestEventBusMultithreadedTest *self, JavaUtilConcurrentCountDownLatch *latch, jint threadCount, jint iterations, id eventToPost);

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$6();

@interface DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread () {
 @public
  DeGreenrobotEventTestEventBusMultithreadedTest *this$0_;
  JavaUtilConcurrentCountDownLatch *startLatch_;
  jint iterations_;
  id eventToPost_;
}

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread, startLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread, eventToPost_, id)

@interface DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread () {
 @public
  DeGreenrobotEventTestEventBusMultithreadedTest *this$0_;
}

@end

@implementation DeGreenrobotEventTestEventBusMultithreadedTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventTestEventBusMultithreadedTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testPost01Thread {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(self, 1);
}

- (void)testPost04Threads {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(self, 4);
}

- (void)testPost40Threads {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(self, 40);
}

- (void)testPostMixedEventType01Thread {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(self, 1);
}

- (void)testPostMixedEventType04Threads {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(self, 4);
}

- (void)testPostMixedEventType40Threads {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(self, 40);
}

- (void)testSubscribeUnSubscribeAndPostMixedEventType {
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 5; i++) {
    DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *thread = create_DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_(self);
    [thread start];
    [threads addWithId:thread];
  }
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_withInt_(self, DeGreenrobotEventTestEventBusMultithreadedTest_COUNT / 4, 5);
  for (DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread * __strong thread in threads) {
    [((DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *) nil_chk(thread)) shutdown];
  }
  for (DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread * __strong thread in threads) {
    [((DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *) nil_chk(thread)) join];
  }
}

- (void)runThreadsSingleEventTypeWithInt:(jint)threadCount {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(self, threadCount);
}

- (void)runThreadsMixedEventTypeWithInt:(jint)threadCount {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(self, threadCount);
}

- (void)runThreadsMixedEventTypeWithInt:(jint)count
                                withInt:(jint)threadCount {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_withInt_(self, count, threadCount);
}

- (jlong)triggerAndWaitForThreadsWithJavaUtilList:(id<JavaUtilList>)threads
             withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch {
  return DeGreenrobotEventTestEventBusMultithreadedTest_triggerAndWaitForThreadsWithJavaUtilList_withJavaUtilConcurrentCountDownLatch_(self, threads, latch);
}

- (id<JavaUtilList>)startThreadsWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                             withInt:(jint)threadCount
                                                             withInt:(jint)iterations
                                                              withId:(id)eventToPost {
  return DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(self, latch, threadCount, iterations, eventToPost);
}

- (void)onEventBackgroundThreadWithNSString:(NSString *)event {
  JreStrongAssign(&lastStringEvent_, event);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(countStringEvent_)) incrementAndGet];
  [self trackEventWithId:event];
}

- (void)onEventMainThreadWithJavaLangInteger:(JavaLangInteger *)event {
  JreStrongAssign(&lastIntegerEvent_, event);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(countIntegerEvent_)) incrementAndGet];
  [self trackEventWithId:event];
}

- (void)onEventAsyncWithDeGreenrobotEventTestIntTestEvent:(DeGreenrobotEventTestIntTestEvent *)event {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(countIntTestEvent_)) incrementAndGet];
  JreStrongAssign(&lastIntTestEvent_, event);
  [self trackEventWithId:event];
}

- (void)onEventWithId:(id)event {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(countObjectEvent_)) incrementAndGet];
  [self trackEventWithId:event];
}

- (void)dealloc {
  RELEASE_(countStringEvent_);
  RELEASE_(countIntegerEvent_);
  RELEASE_(countObjectEvent_);
  RELEASE_(countIntTestEvent_);
  RELEASE_(lastStringEvent_);
  RELEASE_(lastIntegerEvent_);
  RELEASE_(lastIntTestEvent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 7, -1 },
    { NULL, "V", 0x2, 8, 9, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 0, -1, -1, -1 },
    { NULL, "J", 0x2, 12, 13, 0, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testPost01Thread);
  methods[2].selector = @selector(testPost04Threads);
  methods[3].selector = @selector(testPost40Threads);
  methods[4].selector = @selector(testPostMixedEventType01Thread);
  methods[5].selector = @selector(testPostMixedEventType04Threads);
  methods[6].selector = @selector(testPostMixedEventType40Threads);
  methods[7].selector = @selector(testSubscribeUnSubscribeAndPostMixedEventType);
  methods[8].selector = @selector(runThreadsSingleEventTypeWithInt:);
  methods[9].selector = @selector(runThreadsMixedEventTypeWithInt:);
  methods[10].selector = @selector(runThreadsMixedEventTypeWithInt:withInt:);
  methods[11].selector = @selector(triggerAndWaitForThreadsWithJavaUtilList:withJavaUtilConcurrentCountDownLatch:);
  methods[12].selector = @selector(startThreadsWithJavaUtilConcurrentCountDownLatch:withInt:withInt:withId:);
  methods[13].selector = @selector(onEventBackgroundThreadWithNSString:);
  methods[14].selector = @selector(onEventMainThreadWithJavaLangInteger:);
  methods[15].selector = @selector(onEventAsyncWithDeGreenrobotEventTestIntTestEvent:);
  methods[16].selector = @selector(onEventWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COUNT", "I", .constantValue.asInt = DeGreenrobotEventTestEventBusMultithreadedTest_COUNT, 0x1a, -1, -1, -1, -1 },
    { "countStringEvent_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countIntegerEvent_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countObjectEvent_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countIntTestEvent_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastStringEvent_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastIntegerEvent_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastIntTestEvent_", "LDeGreenrobotEventTestIntTestEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$0, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$1, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$2, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$3, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$4, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$5, (void *)&DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$6, "runThreadsSingleEventType", "I", "runThreadsMixedEventType", "II", "triggerAndWaitForThreads", "LJavaUtilList;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/List<Lde/greenrobot/event/test/EventBusMultithreadedTest$PosterThread;>;Ljava/util/concurrent/CountDownLatch;)J", "startThreads", "LJavaUtilConcurrentCountDownLatch;IILNSObject;", "(Ljava/util/concurrent/CountDownLatch;IILjava/lang/Object;)Ljava/util/List<Lde/greenrobot/event/test/EventBusMultithreadedTest$PosterThread;>;", "onEventBackgroundThread", "LNSString;", "onEventMainThread", "LJavaLangInteger;", "onEventAsync", "LDeGreenrobotEventTestIntTestEvent;", "onEvent", "LNSObject;", "LDeGreenrobotEventTestEventBusMultithreadedTest_PosterThread;LDeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusMultithreadedTest = { "EventBusMultithreadedTest", "de.greenrobot.event.test", ptrTable, methods, fields, 7, 0x1, 17, 8, -1, 26, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusMultithreadedTest;
}

@end

void DeGreenrobotEventTestEventBusMultithreadedTest_init(DeGreenrobotEventTestEventBusMultithreadedTest *self) {
  DeGreenrobotEventTestAbstractEventBusTest_init(self);
  JreStrongAssignAndConsume(&self->countStringEvent_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->countIntegerEvent_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->countObjectEvent_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->countIntTestEvent_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

DeGreenrobotEventTestEventBusMultithreadedTest *new_DeGreenrobotEventTestEventBusMultithreadedTest_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest, init)
}

DeGreenrobotEventTestEventBusMultithreadedTest *create_DeGreenrobotEventTestEventBusMultithreadedTest_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest, init)
}

void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsSingleEventTypeWithInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint threadCount) {
  jint iterations = DeGreenrobotEventTestEventBusMultithreadedTest_COUNT / threadCount;
  [((DeGreenrobotEventEventBus *) nil_chk(self->eventBus_)) register__WithId:self];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(threadCount + 1);
  id<JavaUtilList> threads = DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(self, latch, threadCount, iterations, @"Hello");
  jlong time = DeGreenrobotEventTestEventBusMultithreadedTest_triggerAndWaitForThreadsWithJavaUtilList_withJavaUtilConcurrentCountDownLatch_(self, threads, latch);
  AndroidUtilLog_dWithNSString_withNSString_(JreLoadStatic(DeGreenrobotEventEventBus, TAG), JreStrcat("I$I$J$", threadCount, @" threads posted ", iterations, @" events each in ", time, @"ms"));
  [self waitForEventCountWithInt:DeGreenrobotEventTestEventBusMultithreadedTest_COUNT * 2 withInt:5000];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Hello", self->lastStringEvent_);
  jint expectedCount = threadCount * iterations;
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCount, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countStringEvent_)) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCount, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countObjectEvent_)) intValue]);
}

void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint threadCount) {
  DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_withInt_(self, DeGreenrobotEventTestEventBusMultithreadedTest_COUNT, threadCount);
}

void DeGreenrobotEventTestEventBusMultithreadedTest_runThreadsMixedEventTypeWithInt_withInt_(DeGreenrobotEventTestEventBusMultithreadedTest *self, jint count, jint threadCount) {
  [((DeGreenrobotEventEventBus *) nil_chk(self->eventBus_)) register__WithId:self];
  jint eventTypeCount = 3;
  jint iterations = count / threadCount / eventTypeCount;
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(eventTypeCount * threadCount + 1);
  id<JavaUtilList> threadsString = DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(self, latch, threadCount, iterations, @"Hello");
  id<JavaUtilList> threadsInteger = DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(self, latch, threadCount, iterations, JavaLangInteger_valueOfWithInt_(42));
  id<JavaUtilList> threadsIntTestEvent = DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(self, latch, threadCount, iterations, create_DeGreenrobotEventTestIntTestEvent_initWithInt_(7));
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  [threads addAllWithJavaUtilCollection:threadsString];
  [threads addAllWithJavaUtilCollection:threadsInteger];
  [threads addAllWithJavaUtilCollection:threadsIntTestEvent];
  jlong time = DeGreenrobotEventTestEventBusMultithreadedTest_triggerAndWaitForThreadsWithJavaUtilList_withJavaUtilConcurrentCountDownLatch_(self, threads, latch);
  AndroidUtilLog_dWithNSString_withNSString_(JreLoadStatic(DeGreenrobotEventEventBus, TAG), JreStrcat("I$I$J$", threadCount * eventTypeCount, @" mixed threads posted ", iterations, @" events each in ", time, @"ms"));
  jint expectedCountEach = threadCount * iterations;
  jint expectedCountTotal = expectedCountEach * eventTypeCount * 2;
  [self waitForEventCountWithInt:expectedCountTotal withInt:5000];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Hello", self->lastStringEvent_);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(42, [((JavaLangInteger *) nil_chk(self->lastIntegerEvent_)) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(7, ((DeGreenrobotEventTestIntTestEvent *) nil_chk(self->lastIntTestEvent_))->value_);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCountEach, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countStringEvent_)) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCountEach, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countIntegerEvent_)) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCountEach, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countIntTestEvent_)) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expectedCountEach * eventTypeCount, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countObjectEvent_)) intValue]);
}

jlong DeGreenrobotEventTestEventBusMultithreadedTest_triggerAndWaitForThreadsWithJavaUtilList_withJavaUtilConcurrentCountDownLatch_(DeGreenrobotEventTestEventBusMultithreadedTest *self, id<JavaUtilList> threads, JavaUtilConcurrentCountDownLatch *latch) {
  while ([((JavaUtilConcurrentCountDownLatch *) nil_chk(latch)) getCount] != 1) {
    JavaLangThread_sleepWithLong_(1);
  }
  jlong start = JavaLangSystem_currentTimeMillis();
  [latch countDown];
  for (DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread * __strong thread in nil_chk(threads)) {
    [((DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread *) nil_chk(thread)) join];
  }
  return JavaLangSystem_currentTimeMillis() - start;
}

id<JavaUtilList> DeGreenrobotEventTestEventBusMultithreadedTest_startThreadsWithJavaUtilConcurrentCountDownLatch_withInt_withInt_withId_(DeGreenrobotEventTestEventBusMultithreadedTest *self, JavaUtilConcurrentCountDownLatch *latch, jint threadCount, jint iterations, id eventToPost) {
  id<JavaUtilList> threads = create_JavaUtilArrayList_initWithInt_(threadCount);
  for (jint i = 0; i < threadCount; i++) {
    DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread *thread = create_DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_(self, latch, iterations, eventToPost);
    [thread start];
    [threads addWithId:thread];
  }
  return threads;
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMultithreadedTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusMultithreadedTest)

@implementation DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread

- (instancetype)initWithDeGreenrobotEventTestEventBusMultithreadedTest:(DeGreenrobotEventTestEventBusMultithreadedTest *)outer$
                                  withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                               withInt:(jint)iterations
                                                                withId:(id)eventToPost {
  DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_(self, outer$, latch, iterations, eventToPost);
  return self;
}

- (void)run {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(startLatch_)) countDown];
  @try {
    [startLatch_ await];
  }
  @catch (JavaLangInterruptedException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withNSException_(JreLoadStatic(DeGreenrobotEventEventBus, TAG), @"Unexpeced interrupt", e);
  }
  for (jint i = 0; i < iterations_; i++) {
    [((DeGreenrobotEventEventBus *) nil_chk(this$0_->eventBus_)) postWithId:eventToPost_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(startLatch_);
  RELEASE_(eventToPost_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDeGreenrobotEventTestEventBusMultithreadedTest:withJavaUtilConcurrentCountDownLatch:withInt:withId:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDeGreenrobotEventTestEventBusMultithreadedTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "startLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventToPost_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;ILNSObject;", "LDeGreenrobotEventTestEventBusMultithreadedTest;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread = { "PosterThread", "de.greenrobot.event.test", ptrTable, methods, fields, 7, 0x0, 2, 4, 1, -1, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread;
}

@end

void DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread *self, DeGreenrobotEventTestEventBusMultithreadedTest *outer$, JavaUtilConcurrentCountDownLatch *latch, jint iterations, id eventToPost) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  JreStrongAssign(&self->startLatch_, latch);
  self->iterations_ = iterations;
  JreStrongAssign(&self->eventToPost_, eventToPost);
}

DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread *new_DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_(DeGreenrobotEventTestEventBusMultithreadedTest *outer$, JavaUtilConcurrentCountDownLatch *latch, jint iterations, id eventToPost) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread, initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_, outer$, latch, iterations, eventToPost)
}

DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread *create_DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_(DeGreenrobotEventTestEventBusMultithreadedTest *outer$, JavaUtilConcurrentCountDownLatch *latch, jint iterations, id eventToPost) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread, initWithDeGreenrobotEventTestEventBusMultithreadedTest_withJavaUtilConcurrentCountDownLatch_withInt_withId_, outer$, latch, iterations, eventToPost)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusMultithreadedTest_PosterThread)

@implementation DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread

- (instancetype)initWithDeGreenrobotEventTestEventBusMultithreadedTest:(DeGreenrobotEventTestEventBusMultithreadedTest *)outer$ {
  DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_(self, outer$);
  return self;
}

- (void)shutdown {
  running_ = false;
}

- (void)run {
  @try {
    while (running_) {
      [((DeGreenrobotEventEventBus *) nil_chk(this$0_->eventBus_)) register__WithId:self];
      jdouble random = JavaLangMath_random();
      if (random > 0.6) {
        JavaLangThread_sleepWithLong_withInt_(0, JreFpToInt((1000000 * JavaLangMath_random())));
      }
      else if (random > 0.3) {
        JavaLangThread_yield();
      }
      [((DeGreenrobotEventEventBus *) nil_chk(this$0_->eventBus_)) unregisterWithId:self];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)onEventMainThreadWithNSString:(NSString *)event {
  JunitFrameworkTestCase_assertSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventBackgroundThreadWithJavaLangInteger:(JavaLangInteger *)event {
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventWithId:(id)event {
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventAsyncWithId:(id)event {
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDeGreenrobotEventTestEventBusMultithreadedTest:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(onEventMainThreadWithNSString:);
  methods[4].selector = @selector(onEventBackgroundThreadWithJavaLangInteger:);
  methods[5].selector = @selector(onEventWithId:);
  methods[6].selector = @selector(onEventAsyncWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDeGreenrobotEventTestEventBusMultithreadedTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "running_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onEventMainThread", "LNSString;", "onEventBackgroundThread", "LJavaLangInteger;", "onEvent", "LNSObject;", "onEventAsync", "LDeGreenrobotEventTestEventBusMultithreadedTest;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread = { "SubscribeUnsubscribeThread", "de.greenrobot.event.test", ptrTable, methods, fields, 7, 0x0, 7, 2, 7, -1, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread;
}

@end

void DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_(DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *self, DeGreenrobotEventTestEventBusMultithreadedTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  self->running_ = true;
}

DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *new_DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_(DeGreenrobotEventTestEventBusMultithreadedTest *outer$) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread, initWithDeGreenrobotEventTestEventBusMultithreadedTest_, outer$)
}

DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread *create_DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread_initWithDeGreenrobotEventTestEventBusMultithreadedTest_(DeGreenrobotEventTestEventBusMultithreadedTest *outer$) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread, initWithDeGreenrobotEventTestEventBusMultithreadedTest_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusMultithreadedTest_SubscribeUnsubscribeThread)
