//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsLooper.h"
#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventEventBusBuilder.h"
#include "DeGreenrobotEventEventBusException.h"
#include "DeGreenrobotEventTestAbstractEventBusTest.h"
#include "DeGreenrobotEventTestEventBusMethodModifiersTest.h"
#include "DeGreenrobotEventTestIntTestEvent.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "junit/framework/TestCase.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$2();

@implementation DeGreenrobotEventTestEventBusMethodModifiersTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventTestEventBusMethodModifiersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testRegisterForEventTypeAndPost {
  [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) register__WithId:self];
  NSString *event = @"Hello";
  [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) postWithId:event];
  [self waitForEventCountWithInt:4 withInt:1000];
}

- (void)testIllegalMethodNameThrow {
  @try {
    [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) register__WithId:create_DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init()];
    JunitFrameworkTestCase_failWithNSString_(@"Illegal name registered");
  }
  @catch (DeGreenrobotEventEventBusException *ex) {
  }
}

- (void)testIllegalMethodNameSkip {
  JreStrongAssign(&eventBus_, [((DeGreenrobotEventEventBusBuilder *) nil_chk([((DeGreenrobotEventEventBusBuilder *) nil_chk(DeGreenrobotEventEventBus_builder())) skipMethodVerificationForWithIOSClass:DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_class_()])) build]);
  [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) register__WithId:create_DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init()];
  [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) postWithId:create_NSObject_init()];
}

- (void)onEventWithNSString:(NSString *)event {
  [self trackEventWithId:event];
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventMainThreadWithNSString:(NSString *)event {
  [self trackEventWithId:event];
  JunitFrameworkTestCase_assertSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventBackgroundThreadWithNSString:(NSString *)event {
  [self trackEventWithId:event];
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

- (void)onEventAsyncWithNSString:(NSString *)event {
  [self trackEventWithId:event];
  JunitFrameworkTestCase_assertNotSameWithId_withId_(AndroidOsLooper_getMainLooper(), AndroidOsLooper_myLooper());
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testRegisterForEventTypeAndPost);
  methods[2].selector = @selector(testIllegalMethodNameThrow);
  methods[3].selector = @selector(testIllegalMethodNameSkip);
  methods[4].selector = @selector(onEventWithNSString:);
  methods[5].selector = @selector(onEventMainThreadWithNSString:);
  methods[6].selector = @selector(onEventBackgroundThreadWithNSString:);
  methods[7].selector = @selector(onEventAsyncWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$0, (void *)&DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$1, (void *)&DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$2, "onEvent", "LNSString;", "onEventMainThread", "onEventBackgroundThread", "onEventAsync", "LDeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusMethodModifiersTest = { "EventBusMethodModifiersTest", "de.greenrobot.event.test", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, 9, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusMethodModifiersTest;
}

@end

void DeGreenrobotEventTestEventBusMethodModifiersTest_init(DeGreenrobotEventTestEventBusMethodModifiersTest *self) {
  DeGreenrobotEventTestAbstractEventBusTest_init(self);
}

DeGreenrobotEventTestEventBusMethodModifiersTest *new_DeGreenrobotEventTestEventBusMethodModifiersTest_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusMethodModifiersTest, init)
}

DeGreenrobotEventTestEventBusMethodModifiersTest *create_DeGreenrobotEventTestEventBusMethodModifiersTest_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusMethodModifiersTest, init)
}

IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DeGreenrobotEventTestEventBusMethodModifiersTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusMethodModifiersTest)

@implementation DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onEventIllegalNameWithId:(id)event {
  JunitFrameworkTestCase_failWithNSString_(@"onEventIllegalName got called");
}

- (void)onEventWithDeGreenrobotEventTestIntTestEvent:(DeGreenrobotEventTestIntTestEvent *)event {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onEventIllegalNameWithId:);
  methods[2].selector = @selector(onEventWithDeGreenrobotEventTestIntTestEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onEventIllegalName", "LNSObject;", "onEvent", "LDeGreenrobotEventTestIntTestEvent;", "LDeGreenrobotEventTestEventBusMethodModifiersTest;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName = { "IllegalEventMethodName", "de.greenrobot.event.test", ptrTable, methods, NULL, 7, 0x9, 3, 0, 4, -1, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName;
}

@end

void DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init(DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName *self) {
  NSObject_init(self);
}

DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName *new_DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName, init)
}

DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName *create_DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusMethodModifiersTest_IllegalEventMethodName)
