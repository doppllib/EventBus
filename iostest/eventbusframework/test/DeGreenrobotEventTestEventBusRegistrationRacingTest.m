//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DeGreenrobotEventEventBus.h"
#include "DeGreenrobotEventTestAbstractEventBusTest.h"
#include "DeGreenrobotEventTestEventBusRegistrationRacingTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "junit/framework/TestCase.h"
#include "org/junit/Test.h"

@interface DeGreenrobotEventTestEventBusRegistrationRacingTest ()

- (id<JavaUtilList>)startThreads;

@end

inline jint DeGreenrobotEventTestEventBusRegistrationRacingTest_get_ITERATIONS();
#define DeGreenrobotEventTestEventBusRegistrationRacingTest_ITERATIONS 10
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventTestEventBusRegistrationRacingTest, ITERATIONS, jint)

inline jint DeGreenrobotEventTestEventBusRegistrationRacingTest_get_THREAD_COUNT();
#define DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT 16
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventTestEventBusRegistrationRacingTest, THREAD_COUNT, jint)

__attribute__((unused)) static id<JavaUtilList> DeGreenrobotEventTestEventBusRegistrationRacingTest_startThreads(DeGreenrobotEventTestEventBusRegistrationRacingTest *self);

__attribute__((unused)) static IOSObjectArray *DeGreenrobotEventTestEventBusRegistrationRacingTest__Annotations$0();

@interface DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread () {
 @public
  DeGreenrobotEventTestEventBusRegistrationRacingTest *this$0_;
}

@end

@implementation DeGreenrobotEventTestEventBusRegistrationRacingTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventTestEventBusRegistrationRacingTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testRacingRegistrations {
  for (jint i = 0; i < DeGreenrobotEventTestEventBusRegistrationRacingTest_ITERATIONS; i++) {
    JreVolatileStrongAssign(&startLatch_, create_JavaUtilConcurrentCountDownLatch_initWithInt_(DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT));
    JreVolatileStrongAssign(&registeredLatch_, create_JavaUtilConcurrentCountDownLatch_initWithInt_(DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT));
    JreVolatileStrongAssign(&canUnregisterLatch_, create_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
    JreVolatileStrongAssign(&unregisteredLatch_, create_JavaUtilConcurrentCountDownLatch_initWithInt_(DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT));
    id<JavaUtilList> threads = DeGreenrobotEventTestEventBusRegistrationRacingTest_startThreads(self);
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&registeredLatch_))) await];
    [((DeGreenrobotEventEventBus *) nil_chk(eventBus_)) postWithId:@"42"];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&canUnregisterLatch_))) countDown];
    for (jint t = 0; t < DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT; t++) {
      jint eventCount = JreLoadVolatileInt(&((DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread *) nil_chk([((id<JavaUtilList>) nil_chk(threads)) getWithInt:t]))->eventCount_);
      if (eventCount != 1) {
        JunitFrameworkTestCase_failWithNSString_(JreStrcat("$I$I$I", @"Failed in iteration ", i, @": thread #", t, @" has event count of ", eventCount));
      }
    }
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&unregisteredLatch_))) await];
  }
}

- (id<JavaUtilList>)startThreads {
  return DeGreenrobotEventTestEventBusRegistrationRacingTest_startThreads(self);
}

- (void)__javaClone:(DeGreenrobotEventTestEventBusRegistrationRacingTest *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&startLatch_, &original->startLatch_);
  JreCloneVolatileStrong(&registeredLatch_, &original->registeredLatch_);
  JreCloneVolatileStrong(&canUnregisterLatch_, &original->canUnregisterLatch_);
  JreCloneVolatileStrong(&unregisteredLatch_, &original->unregisteredLatch_);
}

- (void)dealloc {
  JreReleaseVolatile(&startLatch_);
  JreReleaseVolatile(&registeredLatch_);
  JreReleaseVolatile(&canUnregisterLatch_);
  JreReleaseVolatile(&unregisteredLatch_);
  RELEASE_(threadPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testRacingRegistrations);
  methods[2].selector = @selector(startThreads);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ITERATIONS", "I", .constantValue.asInt = DeGreenrobotEventTestEventBusRegistrationRacingTest_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "THREAD_COUNT", "I", .constantValue.asInt = DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT, 0x1a, -1, -1, -1, -1 },
    { "startLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "registeredLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "canUnregisterLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "unregisteredLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "threadPool_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&DeGreenrobotEventTestEventBusRegistrationRacingTest__Annotations$0, "()Ljava/util/List<Lde/greenrobot/event/test/EventBusRegistrationRacingTest$SubscriberThread;>;", "LDeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusRegistrationRacingTest = { "EventBusRegistrationRacingTest", "de.greenrobot.event.test", ptrTable, methods, fields, 7, 0x1, 3, 7, -1, 3, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusRegistrationRacingTest;
}

@end

void DeGreenrobotEventTestEventBusRegistrationRacingTest_init(DeGreenrobotEventTestEventBusRegistrationRacingTest *self) {
  DeGreenrobotEventTestAbstractEventBusTest_init(self);
  JreStrongAssign(&self->threadPool_, JavaUtilConcurrentExecutors_newCachedThreadPool());
}

DeGreenrobotEventTestEventBusRegistrationRacingTest *new_DeGreenrobotEventTestEventBusRegistrationRacingTest_init() {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusRegistrationRacingTest, init)
}

DeGreenrobotEventTestEventBusRegistrationRacingTest *create_DeGreenrobotEventTestEventBusRegistrationRacingTest_init() {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusRegistrationRacingTest, init)
}

id<JavaUtilList> DeGreenrobotEventTestEventBusRegistrationRacingTest_startThreads(DeGreenrobotEventTestEventBusRegistrationRacingTest *self) {
  id<JavaUtilList> threads = create_JavaUtilArrayList_initWithInt_(DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT);
  for (jint i = 0; i < DeGreenrobotEventTestEventBusRegistrationRacingTest_THREAD_COUNT; i++) {
    DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread *thread = create_DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread_initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_(self);
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->threadPool_)) executeWithJavaLangRunnable:thread];
    [threads addWithId:thread];
  }
  return threads;
}

IOSObjectArray *DeGreenrobotEventTestEventBusRegistrationRacingTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusRegistrationRacingTest)

@implementation DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread

- (instancetype)initWithDeGreenrobotEventTestEventBusRegistrationRacingTest:(DeGreenrobotEventTestEventBusRegistrationRacingTest *)outer$ {
  DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread_initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ countDownAndAwaitLatchWithJavaUtilConcurrentCountDownLatch:JreLoadVolatileId(&this$0_->startLatch_) withLong:10];
  [((DeGreenrobotEventEventBus *) nil_chk(this$0_->eventBus_)) register__WithId:self];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&this$0_->registeredLatch_))) countDown];
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&this$0_->canUnregisterLatch_))) await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  [((DeGreenrobotEventEventBus *) nil_chk(this$0_->eventBus_)) unregisterWithId:self];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(JreLoadVolatileId(&this$0_->unregisteredLatch_))) countDown];
}

- (void)onEventWithNSString:(NSString *)event {
  eventCount_++;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDeGreenrobotEventTestEventBusRegistrationRacingTest:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(onEventWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDeGreenrobotEventTestEventBusRegistrationRacingTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "eventCount_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onEvent", "LNSString;", "LDeGreenrobotEventTestEventBusRegistrationRacingTest;" };
  static const J2ObjcClassInfo _DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread = { "SubscriberThread", "de.greenrobot.event.test", ptrTable, methods, fields, 7, 0x0, 3, 2, 2, -1, -1, -1, -1 };
  return &_DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread;
}

@end

void DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread_initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_(DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread *self, DeGreenrobotEventTestEventBusRegistrationRacingTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread *new_DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread_initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_(DeGreenrobotEventTestEventBusRegistrationRacingTest *outer$) {
  J2OBJC_NEW_IMPL(DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread, initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_, outer$)
}

DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread *create_DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread_initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_(DeGreenrobotEventTestEventBusRegistrationRacingTest *outer$) {
  J2OBJC_CREATE_IMPL(DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread, initWithDeGreenrobotEventTestEventBusRegistrationRacingTest_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventTestEventBusRegistrationRacingTest_SubscriberThread)
